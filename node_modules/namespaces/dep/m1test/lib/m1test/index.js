var underscore = require('underscore'),
    Reporter = require('./reporter'),
    AssertionError = require('assert').AssertionError,
    Step = require('step');

var reporter = new Reporter();

var Test = function(name, func, group) {
    var test = {
        run: function(done) {
            Step(
                function runBefore() {
                    var before = group.before;
                    if (before) {
                        before(this);
                    } else {
                        return;
                    }
                },
                function runTest(err, val) {
                    if (err) throw err;
                    var done = this;
                    func(function() {
                        reporter.testComplete(test);
                        done(null, true);
                    });
                },
                function runAfter(err, val) {
                    if (err) {
                        err.test = test;
                        throw err;
                    }
                    var after = group.after;
                    if (after) {
                        after(this);
                    } else {
                        return true;
                    }
                },
                function finale(err, val) {
                    done(err, val);
                }
            );

        }
    };
    test.__defineGetter__('name', function() {
        return name;
    });
    test.__defineGetter__('group', function() {
        return group;
    });
    return test;
};

var TestGroup = function(file, module, parentGroup) {
    var tests = [];
    var testGroup;
    var specialAttrNames = [
        'before',
        'after'
    ];
    var getAttrs = function(module) {
        var attrs = {};
        _(specialAttrNames).each(function(name) {
            attrs[name] = module[name] || function(fn) { fn(); };
            delete module[name];
        });
        return attrs;
    };
    var getSubGroups = function(module, parentGroup) {
        var groups = {};
        _(module).each(function(group, name) {
            if (!_(group).isFunction()) {
                groups[name] = new TestGroup(name, group, parentGroup);
                delete module[name];
            }
        });
        return groups;
    };
    var attrs = getAttrs(module);
    var groups;
    testGroup = {
        run: function(done) {
            if (!this.hasGroups) {
                reporter.groupStart(testGroup);
            }
            var steps = [];
            _(tests).each(function(test) {
                steps.push(function(err, val) {
                    if (err) throw err;
                    var innerDone = this;
                    test.run(function(err, val) {
                        innerDone(err, val);
                    });
                });
            });
            groups = getSubGroups(module, testGroup);
            _(groups).each(function(group) {
                steps.push(function(err, val) {
                    if (err) throw err;
                    group.run(this);
                });
            });
            steps.push(function(err, val) {
                done(err, val);
            });
            Step.fn.apply(this, steps)();
        }
    };
    testGroup.__defineGetter__('before', function() {
        var before;
        if (parentGroup) {
            before = function(fn) {
                parentGroup.before(function() {
                    attrs.before(fn);
                });
            };
        } else {
            before = attrs.before;
        }
        return before;
    });
    testGroup.__defineGetter__('after', function() {
        var after;
        if (parentGroup) {
            after = function(fn) {
                parentGroup.after(function() {
                    attrs.after(fn);
                });
            };
        } else {
            after = attrs.after;
        }
        return after;
    });
    testGroup.__defineGetter__('hasGroups', function() {
        return !_(groups).isUndefined() && _(groups).keys().length > 0;
    });
    testGroup.__defineGetter__('hasTests', function() {
        return !_(tests).isUndefined() && _(tests).keys().length > 0;
    });
    testGroup.__defineGetter__('name', function() {
        var name = '';
        if (parentGroup) {
            name = parentGroup.name +  ' -> ';
        }
        var fileParts = file.split('/');
        name = name + fileParts[fileParts.length - 1];
        return name;
    });
    _(module).each(function(func, name) {
        if (_(func).isFunction()) {
            tests.push(new Test(name, func, testGroup));
        }
    });
    return testGroup;
};

var TestModule = function(filePath) {
    var self = this;
    var fileParts = filePath.split('/');
    var fileName = fileParts[fileParts.length - 1];
    var module = require(filePath);
    var groups = [];
    groups.push(new TestGroup(filePath, module)); 
    var testModule = {
        run: function(done) {
            currentTest = self;
            var steps = [];
            var self = this;
            _(groups).each(function(group) {
                steps.push(function(err, val) {
                    if (err) throw err;
                    group.run(this);
                });
            });
            steps.push(function(err, val) {
                done(err, val);
            });
            Step.fn.apply(this, steps)();
        },
    };
    testModule.__defineGetter__('name', function() {
        return fileName;
    });
    return testModule;
};

TestRunner = exports.TestRunner = function(files) {
    var self = this;
    var modules = [];
    if (!files) {
        throw new Error('files required to run TestRunner');
    }
    if (!_(files).isArray()) {
        files = [files];
    }
    _(files).each(function(file) {
        modules.push(new TestModule(file));
    });
    var steps = [];
    _(modules).each(function(module) {
        steps.push(function(err, val) {
            if (err) throw err;
            module.run(this);
        });
    });
    steps.push(function(err, val) {
        if (err && !!!(err instanceof AssertionError)) {
            throw err;
        }
        reporter.done(err);
    });
    Step.fn.apply(this, steps)();
};
