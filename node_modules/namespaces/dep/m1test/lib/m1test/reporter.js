/*!
 * Nodeunit
 * Copyright (c) 2010 Caolan McMahon
 * MIT Licensed
 */

var sys = require('sys'),
    AssertionError = require('assert').AssertionError;

var error_prefix = "\u001B[31m";
var error_suffix = "\u001B[39m";
var ok_prefix = "\u001B[32m";
var ok_suffix = "\u001B[39m";
var bold_prefix = "\u001B[1m";
var bold_suffix = "\u001B[22m";
var assertion_prefix = "\u001B[35m";
var assertion_suffix = "\u001B[39m";

var error = function (str) {
    return error_prefix + str + error_suffix;
};
var ok = function (str) {
    return ok_prefix + str + ok_suffix;
};
var bold = function (str) {
    return bold_prefix + str + bold_suffix;
};
var assertion_message = function (str) {
    return assertion_prefix + str + assertion_suffix;
};

var Reporter = function() {
    
    var start = new Date().getTime();
    var complete = 0;
    
    this.groupStart = function(group) {
        if (group.hasTests) {
            sys.puts('\n' + bold(group.name));
        }
    };
    this.testComplete = function(test) {
        complete++;
        sys.puts('✔ ' + test.name);
    };
    var testFailed = function(err) {
            sys.puts(error('✖ ' + err.test.name) + '\n');
            if (err instanceof AssertionError) {
                var msg = err.message;
                if (!msg && !_(err.actual).isUndefined() && !_(err.operator).isUndefined() && !_(err.expected).isUndefined()) {
                    msg = 'Expected ' + err.actual + ' ' + err.operator + ' ' + err.expected + '\n';
                }
                if (msg) {
                    sys.puts(
                        'Assertion Message: ' +
                        assertion_message(msg) + '\n'
                    );
                }
                sys.puts(err.stack + '\n');
            }
    };
    this.done = function (err) {
        var end = new Date().getTime();
        var duration = end - start;
        if (err) {
            testFailed(err);
            sys.puts(
                bold(error('NOT OK'))
            );            
        } else {
            sys.puts(
                '\n' + bold(ok('OK: ')) + complete +
                ' tests (' + duration + 'ms)'
            );
        }
    };
};

module.exports = Reporter;
