/* automatically generated by JSCoverage - do not edit */
console.log(111);
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['index.js']) {
  _$jscoverage['index.js'] = [];
  _$jscoverage['index.js'][2] = 0;
  _$jscoverage['index.js'][3] = 0;
  _$jscoverage['index.js'][6] = 0;
  _$jscoverage['index.js'][7] = 0;
  _$jscoverage['index.js'][8] = 0;
  _$jscoverage['index.js'][10] = 0;
  _$jscoverage['index.js'][11] = 0;
  _$jscoverage['index.js'][13] = 0;
  _$jscoverage['index.js'][17] = 0;
  _$jscoverage['index.js'][18] = 0;
  _$jscoverage['index.js'][21] = 0;
  _$jscoverage['index.js'][22] = 0;
  _$jscoverage['index.js'][23] = 0;
  _$jscoverage['index.js'][24] = 0;
  _$jscoverage['index.js'][26] = 0;
  _$jscoverage['index.js'][29] = 0;
  _$jscoverage['index.js'][30] = 0;
  _$jscoverage['index.js'][31] = 0;
  _$jscoverage['index.js'][33] = 0;
  _$jscoverage['index.js'][34] = 0;
  _$jscoverage['index.js'][36] = 0;
  _$jscoverage['index.js'][37] = 0;
  _$jscoverage['index.js'][38] = 0;
  _$jscoverage['index.js'][39] = 0;
  _$jscoverage['index.js'][40] = 0;
  _$jscoverage['index.js'][41] = 0;
  _$jscoverage['index.js'][43] = 0;
  _$jscoverage['index.js'][45] = 0;
  _$jscoverage['index.js'][49] = 0;
  _$jscoverage['index.js'][50] = 0;
  _$jscoverage['index.js'][51] = 0;
  _$jscoverage['index.js'][52] = 0;
  _$jscoverage['index.js'][53] = 0;
  _$jscoverage['index.js'][55] = 0;
  _$jscoverage['index.js'][58] = 0;
  _$jscoverage['index.js'][59] = 0;
  _$jscoverage['index.js'][60] = 0;
  _$jscoverage['index.js'][61] = 0;
  _$jscoverage['index.js'][62] = 0;
  _$jscoverage['index.js'][63] = 0;
  _$jscoverage['index.js'][65] = 0;
  _$jscoverage['index.js'][66] = 0;
  _$jscoverage['index.js'][69] = 0;
  _$jscoverage['index.js'][70] = 0;
  _$jscoverage['index.js'][71] = 0;
  _$jscoverage['index.js'][72] = 0;
}
_$jscoverage['index.js'][2]++;
parseSetArgs = exports.parseSetArgs = (function (_args) {
  _$jscoverage['index.js'][3]++;
  var args = {obj: _args[0]};
  _$jscoverage['index.js'][6]++;
  if (_args.length <= 2) {
    _$jscoverage['index.js'][7]++;
    args.key = null;
    _$jscoverage['index.js'][8]++;
    args.val = _args[1];
  }
  else {
    _$jscoverage['index.js'][10]++;
    args.key = _args[1];
    _$jscoverage['index.js'][11]++;
    args.val = _args[2];
  }
  _$jscoverage['index.js'][13]++;
  return args;
});
_$jscoverage['index.js'][17]++;
parseGetArgs = exports.parseGetArgs = (function (_args) {
  _$jscoverage['index.js'][18]++;
  var args = {obj: _args[0]};
  _$jscoverage['index.js'][21]++;
  if (_args.length === 1) {
    _$jscoverage['index.js'][22]++;
    args.key = null;
  }
  else {
    _$jscoverage['index.js'][23]++;
    if (_args.length === 2) {
      _$jscoverage['index.js'][24]++;
      args.key = _args[1];
    }
  }
  _$jscoverage['index.js'][26]++;
  return args;
});
_$jscoverage['index.js'][29]++;
findNamespace = exports.findNamespace = (function (args, includeTop) {
  _$jscoverage['index.js'][30]++;
  if (typeof includeTop === "undefined") {
    _$jscoverage['index.js'][31]++;
    includeTop = true;
  }
  _$jscoverage['index.js'][33]++;
  if (args.key === null) {
    _$jscoverage['index.js'][34]++;
    return args.obj;
  }
  else {
    _$jscoverage['index.js'][36]++;
    var scopeParts = args.key.split(".");
    _$jscoverage['index.js'][37]++;
    var namespace = args.obj;
    _$jscoverage['index.js'][38]++;
    var top = includeTop? scopeParts.length: (scopeParts.length - 1);
    _$jscoverage['index.js'][39]++;
    for (var i = 0; i < top; i++) {
      _$jscoverage['index.js'][40]++;
      if (! namespace) {
        _$jscoverage['index.js'][41]++;
        return undefined;
      }
      _$jscoverage['index.js'][43]++;
      namespace = namespace[scopeParts[i]];
}
    _$jscoverage['index.js'][45]++;
    return namespace;
  }
});
_$jscoverage['index.js'][49]++;
createNamespace = exports.createNamespace = (function (space, keyParts) {
  _$jscoverage['index.js'][50]++;
  var node = space;
  _$jscoverage['index.js'][51]++;
  keyParts.forEach((function (keyPart) {
  _$jscoverage['index.js'][52]++;
  node[keyPart] = node[keyPart]? node[keyPart]: {};
  _$jscoverage['index.js'][53]++;
  node = node[keyPart];
}));
  _$jscoverage['index.js'][55]++;
  return node;
});
_$jscoverage['index.js'][58]++;
setValue = exports.setValue = (function () {
  _$jscoverage['index.js'][59]++;
  var args = parseSetArgs(arguments);
  _$jscoverage['index.js'][60]++;
  var space = findNamespace(args, false);
  _$jscoverage['index.js'][61]++;
  var keyParts = args.key.split(".");
  _$jscoverage['index.js'][62]++;
  if (! space) {
    _$jscoverage['index.js'][63]++;
    space = createNamespace(args.obj, keyParts.slice(0, (keyParts.length - 1)));
  }
  _$jscoverage['index.js'][65]++;
  var topKey = keyParts[(keyParts.length - 1)];
  _$jscoverage['index.js'][66]++;
  space[topKey] = args.val;
});
_$jscoverage['index.js'][69]++;
getValue = exports.getValue = (function () {
  _$jscoverage['index.js'][70]++;
  var args = parseGetArgs(arguments);
  _$jscoverage['index.js'][71]++;
  var space = findNamespace(args);
  _$jscoverage['index.js'][72]++;
  return space;
});
_$jscoverage['index.js'].source = ["// Useful for parsing arguments dynamically for passing to setValue","parseSetArgs = exports.parseSetArgs = function(_args) {","    var args = {","        obj: _args[0]","    };","    if (_args.length &lt;= 2) {","        args.key = null;","        args.val = _args[1];","    } else {","        args.key = _args[1];","        args.val = _args[2];","    }","    return args;","};","","// Useful for parsing arguments dynamically for passing to getValue","parseGetArgs = exports.parseGetArgs = function(_args) {","    var args = {","        obj: _args[0]","    };","    if (_args.length === 1) {","        args.key = null;","    } else if (_args.length === 2) {","        args.key = _args[1];","    }","    return args;","};","","findNamespace = exports.findNamespace = function(args, includeTop) {","    if (typeof includeTop === 'undefined') {","        includeTop = true;","    }","    if (args.key === null) {","        return args.obj;","    } else {","        var scopeParts = args.key.split('.');","        var namespace = args.obj;","        var top = includeTop ? scopeParts.length : (scopeParts.length - 1);","        for (var i = 0; i &lt; top; i++) {","            if (!namespace) {","                return undefined;","            }","            namespace = namespace[scopeParts[i]];","        }","        return namespace;","    }","};","","createNamespace = exports.createNamespace = function(space, keyParts) {","    var node = space;","    keyParts.forEach(function(keyPart) {","        node[keyPart] = node[keyPart] ? node[keyPart] : {};","        node = node[keyPart];","    });","    return node;","};","","setValue = exports.setValue = function(/* obj, key, val */) {","    var args = parseSetArgs(arguments);","    var space = findNamespace(args, false);","    var keyParts = args.key.split('.');","    if (!space) {","        space = createNamespace(args.obj, keyParts.slice(0, (keyParts.length - 1)));","    }","    var topKey = keyParts[(keyParts.length - 1)];","    space[topKey] = args.val;","};","","getValue = exports.getValue = function(/* obj, [key] */) {","    var args = parseGetArgs(arguments);","    var space = findNamespace(args);","    return space;","};"];
